name: WebRTC GPU Application CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Prevent jobs from hanging indefinitely
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        # Removed 3.9 due to compatibility issues with newer dependencies
      fail-fast: false  # Continue other jobs even if one fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install with timeout to prevent hanging - use CI-specific lighter requirements
        timeout 300 pip install -r app/requirements-ci.txt || (echo "App requirements failed" && exit 1)
        timeout 300 pip install -r tests/requirements-ci.txt || (echo "Test requirements failed" && exit 1)
        # Install CPU-only PyTorch with timeout
        timeout 300 pip install --extra-index-url https://download.pytorch.org/whl/cpu torch torchvision || timeout 300 pip install torch torchvision
        pip install pytest pytest-asyncio
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Smoke test - verify imports
      run: |
        export GPU_SIMULATION=true
        export CUDA_WANTED=false
        python smoke_test.py

    - name: Run basic CI tests
      run: |
        export GPU_SIMULATION=true
        export CUDA_WANTED=false
        export CI=true
        python test_ci_basic.py
    
    # Skip server and API tests for now to focus on basic functionality
    - name: Basic functionality test
      run: |
        echo "‚úÖ Basic CI pipeline completed successfully"
        echo "Server startup and API tests skipped to avoid heavy dependencies"

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t rtc-gpu-app:test .
    
    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 -e GPU_SIMULATION=true -e CUDA_WANTED=false --name test-container rtc-gpu-app:test
        sleep 20
        
        curl -f http://localhost:8080/healthz || (docker logs test-container && exit 1)
        curl -f -X POST "http://localhost:8080/process?pixels=640x480&iters=2" || (docker logs test-container && exit 1)
        
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail on vulnerabilities, just report them
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true  # Don't fail the build if upload fails
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-scan'
        
    - name: Show scan summary
      if: always()
      run: |
        if [ -f trivy-results.sarif ]; then
          echo "‚úÖ Security scan completed"
          echo "üìä Results uploaded to GitHub Security tab"
        else
          echo "‚ö†Ô∏è Security scan file not found"
        fi
