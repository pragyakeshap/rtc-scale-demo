name: WebRTC GPU Application CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install -r tests/requirements.txt
        pip install --extra-index-url https://download.pytorch.org/whl/cpu torch torchvision || pip install torch torchvision
        pip install pytest pytest-asyncio
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Smoke test - verify imports
      run: |
        export GPU_SIMULATION=true
        export CUDA_WANTED=false
        cd app
        python -c "import sys; import torch; print('Python:', sys.version); print('PyTorch:', torch.__version__); print('CUDA:', torch.cuda.is_available()); import server; print('All imports successful')"
        cd ..

    - name: Run unit tests
      run: |
        export GPU_SIMULATION=true
        export CUDA_WANTED=false
        python -m pytest tests/test_server.py -v || python tests/test_server.py
    
    - name: Run integration tests
      run: |
        export GPU_SIMULATION=true
        export CUDA_WANTED=false
        python test_integration.py
    
    - name: Start server for API tests
      run: |
        export GPU_SIMULATION=true
        export CUDA_WANTED=false
        echo "Starting server..."
        cd app && uvicorn server:app --host 0.0.0.0 --port 8080 > server.log 2>&1 &
        cd ..
        sleep 15
        
        if ! curl -s http://localhost:8080/healthz > /dev/null; then
          echo "Server failed to start. Logs:"
          cat app/server.log
          exit 1
        fi
        echo "Server started successfully"
      
    - name: Test API endpoints
      run: |
        echo "Testing health endpoint..."
        curl -f -s http://localhost:8080/healthz | jq . || (echo "Health check failed" && exit 1)
        
        echo "Testing metrics endpoint..."
        curl -f -s http://localhost:8080/metrics | head -5
        
        echo "Testing processing endpoint..."
        curl -f -s -X POST "http://localhost:8080/process?pixels=640x480&iters=2" | jq . || (echo "Processing test failed" && exit 1)
    
    - name: Run load tests (light)
      run: |
        python tests/test_load.py --url http://localhost:8080 --requests 20 --concurrency 5

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t rtc-gpu-app:test .
    
    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 -e GPU_SIMULATION=true -e CUDA_WANTED=false --name test-container rtc-gpu-app:test
        sleep 20
        
        curl -f http://localhost:8080/healthz || (docker logs test-container && exit 1)
        curl -f -X POST "http://localhost:8080/process?pixels=640x480&iters=2" || (docker logs test-container && exit 1)
        
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
